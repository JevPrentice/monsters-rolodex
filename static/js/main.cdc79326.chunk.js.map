{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","email","CardList","monsters","map","id","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","simoneJson","JSON","parse","jevJson","push","this","search","toLowerCase","filteredMonsters","filter","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAK,UAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,KAAxC,4BACxB,6BAAKL,EAAMI,QAAQC,OACnB,4BAAIL,EAAMI,QAAQE,YCFbC,EAAW,SAACP,GACrB,OAAO,qBAAKC,UAAW,YAAhB,SACFD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQM,UCJlBC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASC,YAAaH,EAAaI,SAAUH,MCuFjEI,E,kDArFX,WAAYjB,GAAQ,IAAD,8BACf,cAAMA,IAkEVa,aAAe,SAACK,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlErC,EAAKC,MAAQ,CACTf,SAAU,GACVY,YAAa,IAJF,E,qDASnB,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEF,IAAMC,EAAaC,KAAKC,MAAM,0lBAuBxBC,EAAUF,KAAKC,MAAM,qlBAwB3BH,EAAMK,KAAKJ,GACXD,EAAMK,KAAKD,GACX,EAAKb,SAAS,CAACX,SAAUoB,S,oBAQrC,WACI,MAAgCM,KAAKX,MAA9Bf,EAAP,EAAOA,SACD2B,EADN,EAAiBf,YACUgB,cACrBC,EAAmB7B,EAAS8B,QAAO,SAAAlC,GAAO,OAC5CA,EAAQC,KAAK+B,cAAcG,SAASJ,MACxC,OAAO,sBAAKlC,UAAU,MAAf,UACH,kDACA,cAAC,EAAD,CAAWW,YAAY,kBACZC,aAAcqB,KAAKrB,eAC9B,cAAC,EAAD,CAAUL,SAAU6B,W,GAlFdG,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cdc79326.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card = props =>\n    <div className={'card-container'}>\n        <img alt={\"monster\"} src={`https://robohash.org/${props.monster.name}?set=set4&size=180x180`}/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n\n","import React from 'react';\nimport './card-list.styles.css';\n\nimport {Card} from '../card/card.component';\n\nexport const CardList = (props) => {\n    return <div className={'card-list'}>\n        {props.monsters.map(monster =>\n            <Card key={monster.id} monster={monster}/>\n        )}\n    </div>\n}\n","import React from 'react';\n\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeHolder, handleChange}) =>\n    <input className='search' type='search' placeholder={placeHolder} onChange={handleChange}/>\n\n\n\n","import './App.css';\nimport {Component} from \"react\";\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            monsters: [],\n            searchField: ''\n        }\n        // this.handleChange = this.handleChange.bind(this) (instead of this we can use =>fn )\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => {\n\n                const simoneJson = JSON.parse(\"{\\n\" +\n                    \"    \\\"id\\\": 11,\\n\" +\n                    \"    \\\"name\\\": \\\"Simone\\\",\\n\" +\n                    \"    \\\"username\\\": \\\"simone\\\",\\n\" +\n                    \"    \\\"email\\\": \\\"scoester50@gmail.com\\\",\\n\" +\n                    \"    \\\"address\\\": {\\n\" +\n                    \"        \\\"street\\\": \\\"Kulas Light\\\",\\n\" +\n                    \"        \\\"suite\\\": \\\"Apt. 556\\\",\\n\" +\n                    \"        \\\"city\\\": \\\"Gwenborough\\\",\\n\" +\n                    \"        \\\"zipcode\\\": \\\"92998-3874\\\",\\n\" +\n                    \"        \\\"geo\\\": {\\n\" +\n                    \"            \\\"lat\\\": \\\"-37.3159\\\",\\n\" +\n                    \"            \\\"lng\\\": \\\"81.1496\\\"\\n\" +\n                    \"        }\\n\" +\n                    \"    },\\n\" +\n                    \"    \\\"phone\\\": \\\"1-770-736-8031 x56442\\\",\\n\" +\n                    \"    \\\"website\\\": \\\"hildegard.org\\\",\\n\" +\n                    \"    \\\"company\\\": {\\n\" +\n                    \"        \\\"name\\\": \\\"Romaguera-Crona\\\",\\n\" +\n                    \"        \\\"catchPhrase\\\": \\\"Multi-layered client-server neural-net\\\",\\n\" +\n                    \"        \\\"bs\\\": \\\"harness real-time e-markets\\\"\\n\" +\n                    \"    }\\n\" +\n                    \"}\")\n                const jevJson = JSON.parse(\"{\\n\" +\n                    \"    \\\"id\\\": 12,\\n\" +\n                    \"    \\\"name\\\": \\\"Jev\\\",\\n\" +\n                    \"    \\\"username\\\": \\\"jev\\\",\\n\" +\n                    \"    \\\"email\\\": \\\"jevprentice@gmail.com\\\",\\n\" +\n                    \"    \\\"address\\\": {\\n\" +\n                    \"        \\\"street\\\": \\\"Kulas Light\\\",\\n\" +\n                    \"        \\\"suite\\\": \\\"Apt. 556\\\",\\n\" +\n                    \"        \\\"city\\\": \\\"Gwenborough\\\",\\n\" +\n                    \"        \\\"zipcode\\\": \\\"92998-3874\\\",\\n\" +\n                    \"        \\\"geo\\\": {\\n\" +\n                    \"            \\\"lat\\\": \\\"-37.3159\\\",\\n\" +\n                    \"            \\\"lng\\\": \\\"81.1496\\\"\\n\" +\n                    \"        }\\n\" +\n                    \"    },\\n\" +\n                    \"    \\\"phone\\\": \\\"1-770-736-8031 x56442\\\",\\n\" +\n                    \"    \\\"website\\\": \\\"hildegard.org\\\",\\n\" +\n                    \"    \\\"company\\\": {\\n\" +\n                    \"        \\\"name\\\": \\\"Romaguera-Crona\\\",\\n\" +\n                    \"        \\\"catchPhrase\\\": \\\"Multi-layered client-server neural-net\\\",\\n\" +\n                    \"        \\\"bs\\\": \\\"harness real-time e-markets\\\"\\n\" +\n                    \"    }\\n\" +\n                    \"}\")\n\n                users.push(simoneJson)\n                users.push(jevJson)\n                this.setState({monsters: users});\n            })\n    }\n\n    handleChange = (e) => {\n        this.setState({searchField: e.target.value})\n    }\n\n    render() {\n        const {monsters, searchField} = this.state;\n        const search = searchField.toLowerCase();\n        const filteredMonsters = monsters.filter(monster =>\n            monster.name.toLowerCase().includes(search));\n        return <div className=\"App\">\n            <h1>Monsters Rolodex</h1>\n            <SearchBox placeHolder='Search monsters'\n                       handleChange={this.handleChange}/>\n            <CardList monsters={filteredMonsters}/>\n        </div>\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}